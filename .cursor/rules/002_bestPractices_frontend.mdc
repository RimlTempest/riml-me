---
description: フロントエンド開発におけるベストプラクティス
globs: ["src/frontend/**/*", "src/components/**/*"]
alwaysApply: true
---

# フロントエンドのベストプラクティス

## 1. コンポーネント設計

### 1.1 基本原則
- コンポーネントは単一責任の原則に従う
- Propsの型定義は必須
- 状態管理は最小限に抑える
- 再利用可能なコンポーネントを優先

### 1.2 ディレクトリ構造
- features/: 機能ごとのコンポーネント
- components/: 共通コンポーネント
- hooks/: カスタムフック
- utils/: ユーティリティ関数
- types/: 型定義

## 2. 状態管理

### 2.1 基本方針
- グローバル状態は必要最小限に
- コンポーネントの状態は局所的に管理
- 非同期処理はカスタムフックに分離
- キャッシュ戦略を適切に実装

### 2.2 実装規約
- Reduxは大規模アプリケーションのみ
- Context APIは中規模以下で使用
- Zustandは軽量な状態管理に使用
- ReactQueryでサーバー状態を管理

## 3. パフォーマンス最適化

### 3.1 レンダリング最適化
- 不要なレンダリングを防ぐ
- メモ化を適切に使用
- 仮想化を活用する
- Code Splittingを実装

### 3.2 アセット最適化
- 画像は最適なフォーマットで提供
- アセットの遅延読み込みを実装
- キャッシュ戦略を適切に設定
- ビルド時の最適化を行う

## 4. アクセシビリティ

### 4.1 基本要件
- セマンティックなHTML
- キーボード操作のサポート
- スクリーンリーダー対応
- 適切なコントラスト比

### 4.2 実装規約
- WAI-ARIAの適切な使用
- フォーカス管理の実装
- エラー表示の適切な実装
- 代替テキストの提供 